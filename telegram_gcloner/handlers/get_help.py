#!/usr/bin/python3
# -*- coding: utf-8 -*-
import logging

from telegram.ext import Dispatcher, CommandHandler

from utils.config_loader import config
from utils.callback import callback_delete_message
from utils.restricted import restricted

logger = logging.getLogger(__name__)


def init(dispatcher: Dispatcher):
    """Provide handlers initialization."""
    dispatcher.add_handler(CommandHandler('help', get_help))


@restricted
def get_help(update, context):
    message = 'ржлрж╛ржЗрж▓ ржХрзНрж▓рзЛржи ржХрж░рж╛рж░ ржЬржирзНржп ржЧрзБржЧрж▓ ржбрзНрж░рж╛ржЗржн рж▓рж┐ржВржХ ржкрзНрж░рзЗрж░ржг ржХрж░рзБржи ржЕржержмрж╛ ржЧрзБржЧрж▓ ржбрзНрж░рж╛ржЗржн рж▓рж┐ржВржХ рж╕рж╣ ржорзЗрж╕рзЗржЬ ржлрзЛрж░ржУрзЯрж╛рж░рзНржб ржХрж░рзБржи .\n' \
              '**рж╕рж╛рж░рзНржнрж┐рж╕ ржПржХрж╛ржЙржирзНржЯ ржУ ржбрзНрж░рж╛ржЗржн/ржлрзЛрж▓рзНржбрж╛рж░ ржХржиржлрж┐ржЧрж╛рж░ ржХрж░рж╛ ржерж╛ржХрждрзЗ рж╣ржмрзЗ.\n\n' \
              'ЁЯУЪ ржХржорж╛ржирзНржбрж╕ржорзВрж╣:\n' \
              ' тФВ /folders - ржирждрзБржи ржбрзНрж░рж╛ржЗржн/ржлрзЛрж▓рзНржбрж╛рж░ ржпрзЛржЧ ржХрж░рж╛рж░ ржЬржирзНржп\n' \
              ' тФВ /sa - ржмржЯ ржЗржиржмржХрзНрж╕рзЗ , рж╕рж╛рж░рзНржнрж┐рж╕ ржПржХрж╛ржЙржирзНржЯрзЗрж░ ржЬрж┐ржк ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзЗ ржПржЗ ржХржорж╛ржирзНржб ржР ржлрж╛ржЗрж▓рзЗ рж░рж┐ржкрзНрж▓рзЗ ржХрж░рзБржи.\n' \
              ' тФВ /help - ржПржЗ ржХржорж╛ржирзНржб ржЧрж╛ржЗржб ржжрзЗржЦрждрзЗ\n'
              ' тФВ /ban - ржХрзЛржи ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржмрзНрж▓ржХрж▓рж┐рж╕рзНржЯрзЗ ржпрзЛржЧ ржХрж░рждрзЗ\n'
              ' тФВ /unban - ржХрзЛржи ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржмрзНрж▓ржХрж▓рж┐рж╕рзНржЯрзЗ ржмрж╛ржж ржжрж┐рждрзЗ\n'
    rsp = update.message.reply_text(message)
    rsp.done.wait(timeout=60)
    message_id = rsp.result().message_id
    if update.message.chat_id < 0:
        context.job_queue.run_once(callback_delete_message, config.TIMER_TO_DELETE_MESSAGE,
                                   context=(update.message.chat_id, message_id))
        context.job_queue.run_once(callback_delete_message, config.TIMER_TO_DELETE_MESSAGE,
                                   context=(update.message.chat_id, update.message.message_id))
